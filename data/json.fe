(readfile 'input.fe)

;; reads a JSON object from standard input.
(func json:read-stdin ()
      ; vaguely inspired by https://github.com/rxi/json.lua

      (let is-whitespace
           (fn (c)
               (or (is c 32) ; space
                   (is c 9 ) ; \t
                   (is c 13) ; \r
                   (is c 10) ; \n
                   )))
      
      (let is-digit (fn (c) (and (<= 48 c) (<= c 57))))
      
      (let is-delimiter
           (fn (c)
               (or (is-whitespace c)
                   (is c 93 ) ; ]
                   (is c 125) ; }
                   (is c 44 ) ; ,
                   )))

      (let append-byte (fn (s b) (concat s (num->char b))))
      
      (let ch (input:read-byte))
      (let nch (input:read-byte))

      (let read-byte
           (fn ()
             (let och ch)
             (= ch nch)
             (= nch (input:read-byte))
             och))
      
      (let read-while
           (fn (f)
               (let s "")
               (let loop t)
               (while loop
                      (= loop (f ch))
                      (if loop (= s (append-byte s (read-byte)))))
               s))
      
      (let read-until
           (fn (f)
               (let s "")
               (let break nil)
               (while (not break)
                      (= break (f ch))
                      (unless break (= s (append-byte s (read-byte)))))
               s))

      (let parse nil)
      
      (let parse-array
           (fn ()
               (let res '())
               (read-byte)
               (let loop t)
               (while loop
                      (read-while is-whitespace)
                      (if (is ch 93) (do
                                      (read-byte)
                                      (= loop nil))
                          (do
                           (= res (cons (parse) res))
                           (read-while is-whitespace)
                           (let chr (read-byte))
                           (if (is chr 93) (= loop nil)
                               (not (is chr 44)) (error "expected ']' or ','")))))
               (rev res)))
      
      (let parse-object
           (fn ()
               (let res '())
               (read-byte)
               (let loop t)
               (while loop
                      (read-while is-whitespace)
                      (if (is ch 123) (do ; }
                                       (read-byte)
                                       (= loop nil))
                          (is ch 34) ; "
                          (do
                           (let key (parse))
                           (read-while is-whitespace)
                           (if (is ch 58) ; :
                               (do
                                (read-byte)
                                (read-while is-whitespace)
                                (let val (parse))
                                (table:set res key val)
                                (read-while is-whitespace)
                                (let chr (read-byte))
                                (if (is chr 125) (= loop nil)
                                    (not (is chr 44)) (error "expected '}' or ','")))
                               (error "expected ':' after key")))
                          (error "expected string for key")))
               res))
      
      (let parse-literal
           (fn (l)
               (let s (read-until is-delimiter))
               (if (is l s) (is l "true")
                   (error "invalid literal '" s "'"))))
      
      (let parse-number
           (fn ()
               (let s (read-until is-delimiter))
               (let n (to-number s))
               (if (is (type n) 'number) n
                   (error "invalid number '" s "': " n))))
      
      (let parse-string
           (fn ()
               (let res "")
               (read-byte)
               (while (not (is ch 34))
                      (if (< ch 32) (error "control character in string")
                          ; not doing escape chars right now
                          (do
                           (= res (append-byte res ch))
                           ))
                      (read-byte))
               (if (is ch 0) (error "expected closing quote for string")
                   (read-byte))
               res))

      (= parse
           (fn ()
             (if (is ch 116) (parse-literal "true" ) ; t
                 (is ch 102) (parse-literal "false") ; f
                 (is ch 110) (parse-literal "null" ) ; n
                 (is-digit ch) (parse-number)
                 (is ch 34) (parse-string)           ; "
                 (is ch 91) (parse-array)            ; [
                 (is ch 123) (parse-object)          ; {
                 (error "unknown char '" (num->char ch) "'"))))

      (read-while is-whitespace)
      (parse))
